// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/dsbarabash/shopping-lists/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDb is a mock of Db interface.
type MockDb struct {
	ctrl     *gomock.Controller
	recorder *MockDbMockRecorder
}

// MockDbMockRecorder is the mock recorder for MockDb.
type MockDbMockRecorder struct {
	mock *MockDb
}

// NewMockDb creates a new mock instance.
func NewMockDb(ctrl *gomock.Controller) *MockDb {
	mock := &MockDb{ctrl: ctrl}
	mock.recorder = &MockDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDb) EXPECT() *MockDbMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockDb) AddItem(arg0 context.Context, arg1 *model.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockDbMockRecorder) AddItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockDb)(nil).AddItem), arg0, arg1)
}

// AddShoppingList mocks base method.
func (m *MockDb) AddShoppingList(arg0 context.Context, arg1 *model.ShoppingList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShoppingList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShoppingList indicates an expected call of AddShoppingList.
func (mr *MockDbMockRecorder) AddShoppingList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShoppingList", reflect.TypeOf((*MockDb)(nil).AddShoppingList), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockDb) CreateUser(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDbMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDb)(nil).CreateUser), arg0, arg1)
}

// DeleteItemById mocks base method.
func (m *MockDb) DeleteItemById(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemById indicates an expected call of DeleteItemById.
func (mr *MockDbMockRecorder) DeleteItemById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemById", reflect.TypeOf((*MockDb)(nil).DeleteItemById), arg0, arg1)
}

// DeleteSlById mocks base method.
func (m *MockDb) DeleteSlById(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSlById indicates an expected call of DeleteSlById.
func (mr *MockDbMockRecorder) DeleteSlById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlById", reflect.TypeOf((*MockDb)(nil).DeleteSlById), arg0, arg1)
}

// GetItemById mocks base method.
func (m *MockDb) GetItemById(arg0 context.Context, arg1 string) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", arg0, arg1)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockDbMockRecorder) GetItemById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockDb)(nil).GetItemById), arg0, arg1)
}

// GetItems mocks base method.
func (m *MockDb) GetItems(arg0 context.Context) ([]*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", arg0)
	ret0, _ := ret[0].([]*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockDbMockRecorder) GetItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockDb)(nil).GetItems), arg0)
}

// GetSlById mocks base method.
func (m *MockDb) GetSlById(arg0 context.Context, arg1 string) (*model.ShoppingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlById", arg0, arg1)
	ret0, _ := ret[0].(*model.ShoppingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlById indicates an expected call of GetSlById.
func (mr *MockDbMockRecorder) GetSlById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlById", reflect.TypeOf((*MockDb)(nil).GetSlById), arg0, arg1)
}

// GetSls mocks base method.
func (m *MockDb) GetSls(arg0 context.Context) ([]*model.ShoppingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSls", arg0)
	ret0, _ := ret[0].([]*model.ShoppingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSls indicates an expected call of GetSls.
func (mr *MockDbMockRecorder) GetSls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSls", reflect.TypeOf((*MockDb)(nil).GetSls), arg0)
}

// Login mocks base method.
func (m *MockDb) Login(arg0 context.Context, arg1 *model.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockDbMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockDb)(nil).Login), arg0, arg1)
}

// UpdateItem mocks base method.
func (m *MockDb) UpdateItem(arg0 context.Context, arg1 string, arg2 *model.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockDbMockRecorder) UpdateItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockDb)(nil).UpdateItem), arg0, arg1, arg2)
}

// UpdateSl mocks base method.
func (m *MockDb) UpdateSl(arg0 context.Context, arg1 string, arg2 *model.ShoppingList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSl", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSl indicates an expected call of UpdateSl.
func (mr *MockDbMockRecorder) UpdateSl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSl", reflect.TypeOf((*MockDb)(nil).UpdateSl), arg0, arg1, arg2)
}
