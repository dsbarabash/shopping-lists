// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/grpc/v1/shopping_list.proto

package shopping_list_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShoppingListService_GetItem_FullMethodName                  = "/shopping_list.v1.ShoppingListService/GetItem"
	ShoppingListService_GetItems_FullMethodName                 = "/shopping_list.v1.ShoppingListService/GetItems"
	ShoppingListService_CreateItem_FullMethodName               = "/shopping_list.v1.ShoppingListService/CreateItem"
	ShoppingListService_UpdateItem_FullMethodName               = "/shopping_list.v1.ShoppingListService/UpdateItem"
	ShoppingListService_DeleteItem_FullMethodName               = "/shopping_list.v1.ShoppingListService/DeleteItem"
	ShoppingListService_GetShoppingList_FullMethodName          = "/shopping_list.v1.ShoppingListService/GetShoppingList"
	ShoppingListService_GetShoppingLists_FullMethodName         = "/shopping_list.v1.ShoppingListService/GetShoppingLists"
	ShoppingListService_CreateShoppingList_FullMethodName       = "/shopping_list.v1.ShoppingListService/CreateShoppingList"
	ShoppingListService_UpdateShoppingList_FullMethodName       = "/shopping_list.v1.ShoppingListService/UpdateShoppingList"
	ShoppingListService_DeleteShoppingList_FullMethodName       = "/shopping_list.v1.ShoppingListService/DeleteShoppingList"
	ShoppingListService_GetItemsByShoppingListId_FullMethodName = "/shopping_list.v1.ShoppingListService/GetItemsByShoppingListId"
)

// ShoppingListServiceClient is the client API for ShoppingListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingListServiceClient interface {
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	GetItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetItemsResponse, error)
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	GetShoppingList(ctx context.Context, in *GetShoppingListRequest, opts ...grpc.CallOption) (*GetShoppingListResponse, error)
	GetShoppingLists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetShoppingListsResponse, error)
	CreateShoppingList(ctx context.Context, in *CreateShoppingListRequest, opts ...grpc.CallOption) (*CreateShoppingListResponse, error)
	UpdateShoppingList(ctx context.Context, in *UpdateShoppingListRequest, opts ...grpc.CallOption) (*UpdateShoppingListResponse, error)
	DeleteShoppingList(ctx context.Context, in *DeleteShoppingListRequest, opts ...grpc.CallOption) (*DeleteShoppingListResponse, error)
	GetItemsByShoppingListId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetItemsByShoppingListIdResponse, error)
}

type shoppingListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingListServiceClient(cc grpc.ClientConnInterface) ShoppingListServiceClient {
	return &shoppingListServiceClient{cc}
}

func (c *shoppingListServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) GetItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemsResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_GetItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) GetShoppingList(ctx context.Context, in *GetShoppingListRequest, opts ...grpc.CallOption) (*GetShoppingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShoppingListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_GetShoppingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) GetShoppingLists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetShoppingListsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShoppingListsResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_GetShoppingLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) CreateShoppingList(ctx context.Context, in *CreateShoppingListRequest, opts ...grpc.CallOption) (*CreateShoppingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShoppingListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_CreateShoppingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) UpdateShoppingList(ctx context.Context, in *UpdateShoppingListRequest, opts ...grpc.CallOption) (*UpdateShoppingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShoppingListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_UpdateShoppingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) DeleteShoppingList(ctx context.Context, in *DeleteShoppingListRequest, opts ...grpc.CallOption) (*DeleteShoppingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShoppingListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_DeleteShoppingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) GetItemsByShoppingListId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetItemsByShoppingListIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemsByShoppingListIdResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_GetItemsByShoppingListId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingListServiceServer is the server API for ShoppingListService service.
// All implementations must embed UnimplementedShoppingListServiceServer
// for forward compatibility.
type ShoppingListServiceServer interface {
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	GetItems(context.Context, *emptypb.Empty) (*GetItemsResponse, error)
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	GetShoppingList(context.Context, *GetShoppingListRequest) (*GetShoppingListResponse, error)
	GetShoppingLists(context.Context, *emptypb.Empty) (*GetShoppingListsResponse, error)
	CreateShoppingList(context.Context, *CreateShoppingListRequest) (*CreateShoppingListResponse, error)
	UpdateShoppingList(context.Context, *UpdateShoppingListRequest) (*UpdateShoppingListResponse, error)
	DeleteShoppingList(context.Context, *DeleteShoppingListRequest) (*DeleteShoppingListResponse, error)
	GetItemsByShoppingListId(context.Context, *emptypb.Empty) (*GetItemsByShoppingListIdResponse, error)
	mustEmbedUnimplementedShoppingListServiceServer()
}

// UnimplementedShoppingListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShoppingListServiceServer struct{}

func (UnimplementedShoppingListServiceServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedShoppingListServiceServer) GetItems(context.Context, *emptypb.Empty) (*GetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedShoppingListServiceServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedShoppingListServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedShoppingListServiceServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedShoppingListServiceServer) GetShoppingList(context.Context, *GetShoppingListRequest) (*GetShoppingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShoppingList not implemented")
}
func (UnimplementedShoppingListServiceServer) GetShoppingLists(context.Context, *emptypb.Empty) (*GetShoppingListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShoppingLists not implemented")
}
func (UnimplementedShoppingListServiceServer) CreateShoppingList(context.Context, *CreateShoppingListRequest) (*CreateShoppingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShoppingList not implemented")
}
func (UnimplementedShoppingListServiceServer) UpdateShoppingList(context.Context, *UpdateShoppingListRequest) (*UpdateShoppingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShoppingList not implemented")
}
func (UnimplementedShoppingListServiceServer) DeleteShoppingList(context.Context, *DeleteShoppingListRequest) (*DeleteShoppingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShoppingList not implemented")
}
func (UnimplementedShoppingListServiceServer) GetItemsByShoppingListId(context.Context, *emptypb.Empty) (*GetItemsByShoppingListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByShoppingListId not implemented")
}
func (UnimplementedShoppingListServiceServer) mustEmbedUnimplementedShoppingListServiceServer() {}
func (UnimplementedShoppingListServiceServer) testEmbeddedByValue()                             {}

// UnsafeShoppingListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingListServiceServer will
// result in compilation errors.
type UnsafeShoppingListServiceServer interface {
	mustEmbedUnimplementedShoppingListServiceServer()
}

func RegisterShoppingListServiceServer(s grpc.ServiceRegistrar, srv ShoppingListServiceServer) {
	// If the following call pancis, it indicates UnimplementedShoppingListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShoppingListService_ServiceDesc, srv)
}

func _ShoppingListService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).GetItems(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_GetShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShoppingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).GetShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_GetShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).GetShoppingList(ctx, req.(*GetShoppingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_GetShoppingLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).GetShoppingLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_GetShoppingLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).GetShoppingLists(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_CreateShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShoppingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).CreateShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_CreateShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).CreateShoppingList(ctx, req.(*CreateShoppingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_UpdateShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShoppingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).UpdateShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_UpdateShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).UpdateShoppingList(ctx, req.(*UpdateShoppingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_DeleteShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShoppingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).DeleteShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_DeleteShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).DeleteShoppingList(ctx, req.(*DeleteShoppingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_GetItemsByShoppingListId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).GetItemsByShoppingListId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_GetItemsByShoppingListId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).GetItemsByShoppingListId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingListService_ServiceDesc is the grpc.ServiceDesc for ShoppingListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopping_list.v1.ShoppingListService",
	HandlerType: (*ShoppingListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _ShoppingListService_GetItem_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _ShoppingListService_GetItems_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _ShoppingListService_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _ShoppingListService_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ShoppingListService_DeleteItem_Handler,
		},
		{
			MethodName: "GetShoppingList",
			Handler:    _ShoppingListService_GetShoppingList_Handler,
		},
		{
			MethodName: "GetShoppingLists",
			Handler:    _ShoppingListService_GetShoppingLists_Handler,
		},
		{
			MethodName: "CreateShoppingList",
			Handler:    _ShoppingListService_CreateShoppingList_Handler,
		},
		{
			MethodName: "UpdateShoppingList",
			Handler:    _ShoppingListService_UpdateShoppingList_Handler,
		},
		{
			MethodName: "DeleteShoppingList",
			Handler:    _ShoppingListService_DeleteShoppingList_Handler,
		},
		{
			MethodName: "GetItemsByShoppingListId",
			Handler:    _ShoppingListService_GetItemsByShoppingListId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/shopping_list.proto",
}
